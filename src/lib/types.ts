import { z } from "zod";

const nullableDate = z
  .date()
  .or(z.string())
  .nullable()
  .transform((date) => (date ? new Date(date) : null));
const dateZodType = z
  .date()
  .or(z.string())
  .transform((date) => new Date(date));

export const productSchema = z.object({
  code: z.string(),
  description: z.string().catch(""),
  additional_description: z.string().catch(""),
});

export const productCodeSchema = z.object({
  code: z.string(),
});

export const productStockCommitedSchema = z.object({
  product_code: z.string(),
  stock_quantity: z.number(),
  commited_quantity: z.number(),
  pending_quantity: z.number(),
  last_update: dateZodType,
});

export const providerSchema = z.object({
  code: z.string(),
  name: z.string(),
  phone: z.string().catch(""),
  city: z.string().catch(""),
  zip_code: z.string().catch(""),
  address: z.string().catch(""),
});

export const productProviderSchema = z.object({
  product_code: z.string(),
  provider_code: z.string(),
  provider_product_code: z.string().catch(""),
});

export const productAssemblySchema = z.object({
  //! This id must be generated by consumer, is not provided by tango db
  id: z.number(),
  product_code: z.string(),
  supply_product_code: z.string(),
  quantity: z.number(),
});

export const productAssemblyAndProductSchema = z.object({
  //! This id must be generated by consumer, is not provided by tango db
  id: z.number(),
  product_code: z.string(),
  supply_product_code: z.string(),
  quantity: z.number(),
  description: z.string().catch(""),
  additional_description: z.string().catch(""),
  code: z.string(),
});

export const importSchema = z.object({
  id: z.string(),
  provider_code: z.string(),
  enabled: z.boolean(),
  opening_date: nullableDate,
  validity_date: nullableDate,
  origin_currency: z.string().catch(""),
  country: z.string().catch(""),
  observations: z.string().catch(""),
  dollar_price: z.number(),
  legend1: z.string().catch(""),
  legend2: z.string().catch(""),
  legend3: z.string().catch(""),
});

export const productImportSchema = z.object({
  //! This id must be generated by consumer, is not provided by tango db
  id: z.number(),
  product_code: z.string(),
  import_id: z.string(),
  ordered_quantity: z.number(),
  closed: z.boolean(),
  shipping_date: dateZodType,
  national_date: dateZodType,
  arrival_date: dateZodType,
  national_quantity: z.number().catch(0),
});

export const orderSchema = z.object({
  order_number: z.string(),
  approved_by: z.string().catch(""),
  client_code: z.string(),
  approval_date: dateZodType,
  delivery_date: dateZodType,
  order_date: dateZodType,
  entry_date: dateZodType,
  remito_number: z.string().catch(""),
  state: z.number().catch(-1),
});

export const orderAndOrderProdSchema = z.object({
  //! This id must be generated by consumer, is not provided by tango db
  id: z.number(),
  order_number: z.string(),
  approved_by: z.string().catch(""),
  client_code: z.string(),
  approval_date: dateZodType,
  delivery_date: dateZodType,
  order_date: dateZodType,
  entry_date: dateZodType,
  remito_number: z.string().catch(""),
  state: z.number().catch(-1),
  product_code: z.string(),
  ordered_quantity: z.number(),
});

export const orderProductSchema = z.object({
  //! This id must be generated by consumer, is not provided by tango db
  id: z.number(),
  order_number: z.string(),
  product_code: z.string(),
  ordered_quantity: z.number(),
});

export const orderProductWProductSchema = z.object({
  //! This id must be generated by consumer, is not provided by tango db
  id: z.number(),
  order_number: z.string(),
  product_code: z.string(),
  ordered_quantity: z.number(),
  code: z.string(),
  description: z.string().catch(""),
  additional_description: z.string().catch(""),
});

export const clientSchema = z.object({
  code: z.string(),
  name: z.string(),
  phone: z.string().catch(""),
  city: z.string().catch(""),
  zip_code: z.string().catch(""),
  address: z.string().catch(""),
});

export const orderSoldSchema = z.object({
  N_COMP: z.string(),
  client_code: z.string(),
  emission_date: dateZodType,
  MON_CTE: z.boolean(),
  PORC_BONIF: z.number(),
  dollar_price: z.number(),
});

export const orderProductSoldSchema = z.object({
  product_code: z.string(),
  // date: dateZodType,
  CANTIDAD: z.number(),
  N_COMP: z.string(),
  // PORC_DTO: z.number().catch(0),
  PRECIO_NET: z.number().catch(0),
  // PRECIO_PAN: z.number().catch(0),
  // PREC_ULC_E: z.number().catch(0),
  // T_COMP: z.string().catch(''),
});

export const crmClientSchema = z.object({
  client_id: z.number().transform((id) => id.toString()),
  business_name: z.string(),
  name: z.string(),
  address: z.string().catch(""),
  city: z.string().catch(""),
  province: z.string().catch(""),
  zip_code: z.string().catch(""),
  email: z.string().catch(""),
  tango_code: z.string().catch(""),
  comments: z.string().catch(""),
  cuit: z.string().catch(""),
  phone1: z.string().catch(""),
  creation_date: nullableDate,
  last_update: nullableDate,
  attention_schedule: z.string().catch(""),
  state: z.string().catch(""),
});

export const crmBudgetSchema = z.object({
  client_id: z.number().transform((id) => id.toString()),
  budget_id: z.number(),
  category_id: z.number(),
  date: nullableDate,
  validity_date: nullableDate,
  finished_date: nullableDate,
  next_contact_date: nullableDate,
  last_update: nullableDate,
  comments: z.string().catch(""),
});

export const crmBudgetProductSchema = z.object({
  budget_products_id: z.number(),
  budget_id: z.number(),
  product_code: z.string(),
  description: z.string().catch(""),
  quantity: z.number(),
  pending_quantity: z.number(),
  creation_date: nullableDate,
});

// Export all types inferred from the schema
export type Product = z.infer<typeof productSchema>;
export type ProductStockCommited = z.infer<typeof productStockCommitedSchema>;
export type Provider = z.infer<typeof providerSchema>;
export type ProductProvider = z.infer<typeof productProviderSchema>;
export type ProductAssembly = z.infer<typeof productAssemblySchema>;
export type Import = z.infer<typeof importSchema>;
export type ProductImport = z.infer<typeof productImportSchema>;
export type Order = z.infer<typeof orderSchema>;
export type OrderProduct = z.infer<typeof orderProductSchema>;
export type Client = z.infer<typeof clientSchema>;
export type OrderSold = z.infer<typeof orderSoldSchema>;
export type OrderProductSold = z.infer<typeof orderProductSoldSchema>;
export type CrmClient = z.infer<typeof crmClientSchema>;
export type CrmBudget = z.infer<typeof crmBudgetSchema>;
export type CrmBudgetProduct = z.infer<typeof crmBudgetProductSchema>;

// Other enums
export enum CutUnits {
  Meters = "MT",
  Quantity = "UNI",
  Kits = "KITS",
  Piece = "PZA",
}

export const CutUnitsZEnum = [CutUnits.Meters, CutUnits.Quantity, CutUnits.Kits, CutUnits.Piece] as const;

export type ChangeTypeOfKeys<T extends object, A, B> = {
  [key in keyof T]: T[key] extends A ? B : (T[key] extends object ? ChangeTypeOfKeys<T[key], A, B> : T[key]);
};
